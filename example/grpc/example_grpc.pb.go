// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: example.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FibonacciPrinterClient is the client API for FibonacciPrinter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FibonacciPrinterClient interface {
	GetFibonacci(ctx context.Context, in *Number, opts ...grpc.CallOption) (FibonacciPrinter_GetFibonacciClient, error)
}

type fibonacciPrinterClient struct {
	cc grpc.ClientConnInterface
}

func NewFibonacciPrinterClient(cc grpc.ClientConnInterface) FibonacciPrinterClient {
	return &fibonacciPrinterClient{cc}
}

func (c *fibonacciPrinterClient) GetFibonacci(ctx context.Context, in *Number, opts ...grpc.CallOption) (FibonacciPrinter_GetFibonacciClient, error) {
	stream, err := c.cc.NewStream(ctx, &FibonacciPrinter_ServiceDesc.Streams[0], "/main.FibonacciPrinter/GetFibonacci", opts...)
	if err != nil {
		return nil, err
	}
	x := &fibonacciPrinterGetFibonacciClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FibonacciPrinter_GetFibonacciClient interface {
	Recv() (*Number, error)
	grpc.ClientStream
}

type fibonacciPrinterGetFibonacciClient struct {
	grpc.ClientStream
}

func (x *fibonacciPrinterGetFibonacciClient) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FibonacciPrinterServer is the server API for FibonacciPrinter service.
// All implementations must embed UnimplementedFibonacciPrinterServer
// for forward compatibility
type FibonacciPrinterServer interface {
	GetFibonacci(*Number, FibonacciPrinter_GetFibonacciServer) error
	mustEmbedUnimplementedFibonacciPrinterServer()
}

// UnimplementedFibonacciPrinterServer must be embedded to have forward compatible implementations.
type UnimplementedFibonacciPrinterServer struct {
}

func (UnimplementedFibonacciPrinterServer) GetFibonacci(*Number, FibonacciPrinter_GetFibonacciServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFibonacci not implemented")
}
func (UnimplementedFibonacciPrinterServer) mustEmbedUnimplementedFibonacciPrinterServer() {}

// UnsafeFibonacciPrinterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FibonacciPrinterServer will
// result in compilation errors.
type UnsafeFibonacciPrinterServer interface {
	mustEmbedUnimplementedFibonacciPrinterServer()
}

func RegisterFibonacciPrinterServer(s grpc.ServiceRegistrar, srv FibonacciPrinterServer) {
	s.RegisterService(&FibonacciPrinter_ServiceDesc, srv)
}

func _FibonacciPrinter_GetFibonacci_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Number)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FibonacciPrinterServer).GetFibonacci(m, &fibonacciPrinterGetFibonacciServer{stream})
}

type FibonacciPrinter_GetFibonacciServer interface {
	Send(*Number) error
	grpc.ServerStream
}

type fibonacciPrinterGetFibonacciServer struct {
	grpc.ServerStream
}

func (x *fibonacciPrinterGetFibonacciServer) Send(m *Number) error {
	return x.ServerStream.SendMsg(m)
}

// FibonacciPrinter_ServiceDesc is the grpc.ServiceDesc for FibonacciPrinter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FibonacciPrinter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.FibonacciPrinter",
	HandlerType: (*FibonacciPrinterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFibonacci",
			Handler:       _FibonacciPrinter_GetFibonacci_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example.proto",
}
